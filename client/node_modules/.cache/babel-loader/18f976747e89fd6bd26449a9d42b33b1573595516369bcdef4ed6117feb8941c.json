{"ast":null,"code":"const API_URL = \"http://localhost:8000/v1\";\n\n// TODO: Once API is ready.\n// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const responce = await fetch(`${API_URL}/planets`);\n  return await responce.json();\n}\n\n// TODO: Once API is ready.\n// Load launches, sort by flight number, and return as JSON.\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\n// TODO: Once API is ready.\n// Submit given launch data to launch system.\nasync function httpSubmitLaunch(launch) {\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(launch)\n    });\n  } catch (error) {\n    return {\n      ok: false\n    };\n  }\n}\n\n// TODO: Once API is ready.\n// Delete launch with given ID.\nasync function httpAbortLaunch(id) {\n  try {\n    return await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\"\n    });\n  } catch (error) {\n    console.log(error);\n    return {\n      ok: false\n    };\n  }\n}\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"names":["API_URL","httpGetPlanets","responce","fetch","json","httpGetLaunches","response","fetchedLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","error","ok","httpAbortLaunch","id","console","log"],"sources":["/home/dev/Desktop/node-started/NASA-PROJECT/clients/src/hooks/requests.js"],"sourcesContent":["const API_URL = \"http://localhost:8000/v1\";\n\n// TODO: Once API is ready.\n// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const responce = await fetch(`${API_URL}/planets`);\n  return await responce.json();\n}\n\n// TODO: Once API is ready.\n// Load launches, sort by flight number, and return as JSON.\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\n// TODO: Once API is ready.\n// Submit given launch data to launch system.\nasync function httpSubmitLaunch(launch) {\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(launch),\n    });\n  } catch (error) {\n    return {\n      ok: false,\n    };\n  }\n}\n\n// TODO: Once API is ready.\n// Delete launch with given ID.\nasync function httpAbortLaunch(id) {\n  try {\n    return await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\",\n    });\n  } catch (error) {\n    console.log(error);\n    return {\n      ok: false,\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,0BAA0B;;AAE1C;AACA;AACA,eAAeC,cAAcA,CAAA,EAAG;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAS,CAAC;EAClD,OAAO,MAAME,QAAQ,CAACE,IAAI,EAAE;AAC9B;;AAEA;AACA;AACA,eAAeC,eAAeA,CAAA,EAAG;EAC/B,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAE,GAAEH,OAAQ,WAAU,CAAC;EACnD,MAAMO,eAAe,GAAG,MAAMD,QAAQ,CAACF,IAAI,EAAE;EAC7C,OAAOG,eAAe,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACpC,OAAOD,CAAC,CAACE,YAAY,GAAGD,CAAC,CAACC,YAAY;EACxC,CAAC,CAAC;AACJ;;AAEA;AACA;AACA,eAAeC,gBAAgBA,CAACC,MAAM,EAAE;EACtC,IAAI;IACF,OAAO,MAAMV,KAAK,CAAE,GAAEH,OAAQ,WAAU,EAAE;MACxCc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,OAAO;MACLC,EAAE,EAAE;IACN,CAAC;EACH;AACF;;AAEA;AACA;AACA,eAAeC,eAAeA,CAACC,EAAE,EAAE;EACjC,IAAI;IACF,OAAO,MAAMnB,KAAK,CAAE,GAAEH,OAAQ,aAAYsB,EAAG,EAAC,EAAE;MAC9CR,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;IAClB,OAAO;MACLC,EAAE,EAAE;IACN,CAAC;EACH;AACF;AAEA,SAASnB,cAAc,EAAEI,eAAe,EAAEO,gBAAgB,EAAES,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}